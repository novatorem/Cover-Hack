{"version":3,"sources":["actions/helpers.js","actions/user.js","react-components/Header/index.js","react-components/BaseReactComponent/index.js","react-components/Student/index.js","actions/student.js","react-components/StudentList/index.js","react-components/Input/index.js","react-components/StudentForm/index.js","react-components/Dashboard/index.js","MainView.js","react-components/Login/index.js","App.js","serviceWorker.js","index.js"],"names":["setEmptyState","setState","email","password","name","year","type","body","updateLoginForm","field","value","login","request","Request","method","JSON","stringify","getState","headers","Accept","fetch","then","res","status","json","undefined","currentUser","catch","error","console","log","logout","Header","logoutUser","props","history","push","this","title","subtitle","className","Button","onClick","variant","React","Component","BaseReactComponent","_subscription","subscribe","state","filterState","bind","filteredState","isPlainObject","Error","unsubscribe","Student","student","TableRow","TableCell","component","scope","getStudents","alert","students","updateStudentForm","addStudent","StudentList","studentList","Fragment","Table","TableBody","map","key","uid","Input","label","onChange","Grid","item","xl","lg","md","s","xs","TextField","defaultValue","margin","StudentForm","studentForm","message","container","spacing","e","target","color","Dashboard","MainView","exact","path","render","Login","App","Boolean","window","location","hostname","match","startLogging","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gZAUaA,EAAgB,WACzBC,mBAAS,cAAe,MACxBA,mBAAS,YAAa,CAAEC,MAAO,GAAIC,SAAU,KAC7CF,mBAAS,cAAe,CAAEG,KAAM,GAAIC,KAAM,KAC1CJ,mBAAS,cAAe,IACxBA,mBAAS,UAAW,CAAEK,KAAM,GAAIC,KAAM,MCS7BC,EAAkB,SAAAC,GAAU,IAC7BL,EAAgBK,EAAhBL,KAAMM,EAAUD,EAAVC,MACdT,mBAAS,aAAD,OAAcG,GAAQM,IAGrBC,EAAQ,WAEjB,IAAMC,EAAU,IAAIC,QAAQ,eAAgB,CACxCC,OAAQ,OACRP,KAAMQ,KAAKC,UAAUC,mBAAS,cAC9BC,QAAS,CACLC,OAAQ,oCACR,eAAgB,sBAKxBC,MAAMR,GACDS,MAAK,SAAAC,GACF,GAAmB,MAAfA,EAAIC,OACJ,OAAOD,EAAIE,UAGlBH,MAAK,SAAAG,QACuBC,IAArBD,EAAKE,aACLzB,mBAAS,cAAeuB,EAAKE,gBAGpCC,OAAM,SAAAC,GACHC,QAAQC,IAAIF,OAIXG,EAAS,WAGlBX,MAFY,iBAGPC,MAAK,SAAAC,GACFtB,OAEH2B,OAAM,SAAAC,GACHC,QAAQC,IAAIF,OC/BTI,G,wNAxBXC,WAAa,WACT,EAAKC,MAAMC,QAAQC,KAAK,KACxBL,K,uDAGM,IAAD,EACuBM,KAAKH,MAAzBI,EADH,EACGA,MAAOC,EADV,EACUA,SAEf,OACI,yBAAKC,UAAU,UACX,4BAAKF,GACL,4BAAKC,GACL,kBAACE,EAAA,EAAD,CACIC,QAASL,KAAKJ,WACdO,UAAU,yBACVG,QAAQ,aAHZ,e,GAbKC,IAAMC,Y,mCCkBZC,E,mLAtBW,IAAD,OAIjBT,KAAKU,cAAgBC,qBAHJ,SAAAC,GACb,EAAKhD,SAASgD,KAEuBZ,KAAKa,YAAYC,KAAKd,OAC/D,IAAMe,EAAgBf,KAAKa,YAAYjC,sBACvC,IAAKoC,YAAcD,GACf,MAAM,IAAIE,MAAM,iDAEpBjB,KAAKpC,SAASmD,K,6CAIdG,sBAAYlB,KAAKU,iB,oCAKjB,MAAM,IAAIO,MAAM,wC,GAnBSV,IAAMC,W,kBCqBxBW,G,6KAlBH,IACAC,EAAYpB,KAAKH,MAAjBuB,QACArD,EAAeqD,EAAfrD,KAAMC,EAASoD,EAATpD,KAEd,OACE,kBAACqD,EAAA,EAAD,CAAUlB,UAAU,WAClB,kBAACmB,EAAA,EAAD,CAAWC,UAAU,KAAKC,MAAM,OAC7BzD,GAGH,kBAACuD,EAAA,EAAD,CAAWC,UAAU,KAAKC,MAAM,OAC7BxD,Q,GAZWuC,IAAMC,YCAfiB,EAAc,WAKvB1C,MAHY,aAIPC,MAAK,SAAAC,GACF,GAAmB,MAAfA,EAAIC,OAEJ,OAAOD,EAAIE,OAEXuC,MAAM,6BAGb1C,MAAK,SAAAG,GAEFvB,mBAAS,cAAeuB,EAAKwC,aAEhCrC,OAAM,SAAAC,GACHC,QAAQC,IAAIF,OAIXqC,EAAoB,SAAAxD,GAAU,IAC/BL,EAAgBK,EAAhBL,KAAMM,EAAUD,EAAVC,MACdT,mBAAS,eAAD,OAAgBG,GAAQM,IAIvBwD,EAAa,WAEtB,IAGMT,EAAUxC,mBAAS,eAGnBL,EAAU,IAAIC,QANR,YAMqB,CAC7BC,OAAQ,OACRP,KAAMQ,KAAKC,UAAUyC,GACrBvC,QAAS,CACLC,OAAQ,oCACR,eAAgB,sBAKxBC,MAAMR,GACDS,MAAK,SAASC,GAGQ,MAAfA,EAAIC,OAEJtB,mBAAS,UAAW,CAChBM,KAAM,4BACND,KAAM,YAKVL,mBAAS,UAAW,CAChBM,KAAM,gCACND,KAAM,aAIjBqB,OAAM,SAAAC,GACHC,QAAQC,IAAIF,OCnBTuC,G,mLAjCP,MAAO,CAAEC,YADgB,EAAfA,e,+BAIL,IAEGA,EAAgB/B,KAAKY,MAArBmB,YAER,OACI,kBAAC,IAAMC,SAAP,KACI,kBAAC5B,EAAA,EAAD,CACIC,QAASoB,EACTtB,UAAU,8CACVG,QAAQ,aAHZ,gBAOA,kBAAC2B,EAAA,EAAD,CAAO9B,UAAU,gBACb,kBAAC+B,EAAA,EAAD,KACKH,EAAYI,KAAI,SAAAf,GAAO,OACpB,kBAAC,EAAD,CACIgB,IAAKC,YACDjB,GAEJA,QAASA,c,GA5BfX,I,kBCWX6B,G,6KAlBH,IAAD,EACkCtC,KAAKH,MAAtC0C,EADD,EACCA,MAAOlE,EADR,EACQA,MAAOmE,EADf,EACeA,SAAUzE,EADzB,EACyBA,KAEhC,OACE,kBAAC0E,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,EAAG,GAAIC,GAAI,IACzC,kBAACC,EAAA,EAAD,CACEjF,KAAMA,EACNwE,MAAOA,EACPU,aAAc5E,EACd8B,UAAU,mBACV+C,OAAO,SACPV,SAAUA,S,GAZAjC,IAAMC,YCiEX2C,G,mLAvDP,MAAO,CAAEC,YADyB,EAAxBA,YACYC,QADY,EAAXA,W,+BAIlB,MAE4BrD,KAAKY,MAA9BwC,EAFH,EAEGA,YAAaC,EAFhB,EAEgBA,QAEbtF,EAAeqF,EAAfrF,KAAMC,EAASoF,EAATpF,KAEd,OACI,kBAAC,IAAMgE,SAAP,KACI,kBAACS,EAAA,EAAD,CAAMtC,UAAU,eAAemD,WAAS,EAACC,QAAS,GAE9C,kBAAC,EAAD,CACIxF,KAAK,OACLM,MAAON,EACPyE,SAAU,SAAAgB,GAAC,OAAI5B,EAAkB4B,EAAEC,SACnClB,MAAM,iBAGV,kBAAC,EAAD,CACIxE,KAAK,OACLM,MAAOL,EACPwE,SAAU,SAAAgB,GAAC,OAAI5B,EAAkB4B,EAAEC,SACnClB,MAAM,SAGV,kBAACE,EAAA,EAAD,CACItC,UAAU,4BACVuC,MAAI,EACJC,GAAI,EACJC,GAAI,EACJC,GAAI,GACJC,EAAG,GACHC,GAAI,IAEJ,kBAAC3C,EAAA,EAAD,CACIE,QAAQ,YACRoD,MAAM,UACNrD,QAASwB,EACT1B,UAAU,+BAJd,iBAWR,uBAAGA,UAAS,iCAA4BkD,EAAQpF,OAC3CoF,EAAQnF,W,GArDHuC,ICuBXkD,E,kDA3BX,WAAY9D,GAAQ,IAAD,8BACf,cAAMA,IACDA,MAAMC,QAAQC,KAAK,cAFT,E,qDAKT,IACED,EAAYE,KAAKH,MAAjBC,QAER,OACI,yBAAKK,UAAU,OAEX,kBAAC,EAAD,CACIF,MAAM,YACNC,SAAS,qBACTJ,QAASA,IAIb,kBAAC,EAAD,MAGA,kBAAC,EAAD,W,GAtBQS,IAAMC,WCmBfoD,E,uKAjBP,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CACIC,OAAK,EACLC,KAAM,CAAC,IAAK,cACZC,OAAQ,gBAAGjE,EAAH,EAAGA,QAAH,OACJ,kBAAC,EAAD,CAAWA,QAASA,OAG5B,kBAAC,IAAD,CAAOiE,OAAQ,kBAAM,uD,GAZlBxD,IAAMC,WCsCdwD,G,6KAlCP,OACI,yBAAK7D,UAAU,0BACX,yBAAKA,UAAU,sBACX,2CAEA,kBAAC6C,EAAA,EAAD,CACIjF,KAAK,QACLwE,MAAM,QACNpC,UAAU,iDACV+C,OAAO,SACPV,SAAU,SAAAgB,GAAC,OAAIrF,EAAgBqF,EAAEC,WAGrC,kBAACT,EAAA,EAAD,CACIjF,KAAK,WACLwE,MAAM,WACNtE,KAAK,WACLkC,UAAU,iDACV+C,OAAO,SACPV,SAAU,SAAAgB,GAAC,OAAIrF,EAAgBqF,EAAEC,WAGrC,kBAACrD,EAAA,EAAD,CACID,UAAU,uCACVE,QAAS/B,GAFb,gB,GAxBAiC,IAAMC,YCwBXyD,E,kDAdX,WAAYpE,GAAQ,IAAD,6BACf,cAAMA,GXbVd,MAFY,wBAGPC,MAAK,SAAAC,GACF,GAAmB,MAAfA,EAAIC,OACJ,OAAOD,EAAIE,UAGlBH,MAAK,SAAAG,GACEA,GAAQA,EAAKE,aACbzB,mBAAS,cAAeuB,EAAKE,gBAGpCC,OAAM,SAAAC,GACHC,QAAQC,IAAIF,MWAD,E,2DAHf,MAAO,CAAEF,YADgB,EAAfA,iB,8CASJ,IACEA,EAAgBW,KAAKY,MAArBvB,YAER,OACI,yBAAKc,UAAU,OAAQd,EAA0B,kBAAC,EAAD,MAAZ,kBAAC,EAAD,W,GAnB/BoB,GCEEyD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCPN3G,IAIA4G,yBAEAC,IAAST,OAAO,kBAAC,EAAD,MAASU,SAASC,eAAe,SDgH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7F,MAAK,SAAA8F,GACjCA,EAAaC,kB","file":"static/js/main.b5b2587f.chunk.js","sourcesContent":["import { setState } from \"statezero\";\n\n// Initialize all state paths used by your app as empty.\n// These are the states that you can filter using filterState()\n// as needed by specific components. All component classes that read\n// from these state paths must extend BaseReactComponent class.\n//\n// - currentUser state path is used by the root App component\n// - studentForm and message state paths are used by the StudentForm component\n// - studentList state path is used by the StudentList component\nexport const setEmptyState = () => {\n    setState(\"currentUser\", null);\n    setState(\"loginForm\", { email: \"\", password: \"\" });\n    setState(\"studentForm\", { name: \"\", year: \"\" });\n    setState(\"studentList\", []);\n    setState(\"message\", { type: \"\", body: \"\" });\n};\n","// getState is used to get the value of a state path\n// setState is used to set the value of a state path\nimport { getState, setState } from \"statezero\";\nimport { setEmptyState } from \"./helpers\";\n\nexport const readCookie = () => {\n    const url = \"/users/check-session\";\n\n    fetch(url)\n        .then(res => {\n            if (res.status === 200) {\n                return res.json();\n            }\n        })\n        .then(json => {\n            if (json && json.currentUser) {\n                setState(\"currentUser\", json.currentUser);\n            }\n        })\n        .catch(error => {\n            console.log(error);\n        });\n};\n\nexport const updateLoginForm = field => {\n    const { name, value } = field;\n    setState(`loginForm.${name}`, value);\n};\n\nexport const login = () => {\n    // Create our request constructor with all the parameters we need\n    const request = new Request(\"/users/login\", {\n        method: \"post\",\n        body: JSON.stringify(getState(\"loginForm\")),\n        headers: {\n            Accept: \"application/json, text/plain, */*\",\n            \"Content-Type\": \"application/json\"\n        }\n    });\n\n    // Send the request with fetch()\n    fetch(request)\n        .then(res => {\n            if (res.status === 200) {\n                return res.json();\n            }\n        })\n        .then(json => {\n            if (json.currentUser !== undefined) {\n                setState(\"currentUser\", json.currentUser);\n            }\n        })\n        .catch(error => {\n            console.log(error);\n        });\n};\n\nexport const logout = () => {\n    const url = \"/users/logout\";\n\n    fetch(url)\n        .then(res => {\n            setEmptyState();\n        })\n        .catch(error => {\n            console.log(error);\n        });\n};\n","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\n\nimport { logout } from \"./../../actions/user\";\n\nimport \"./../../App.css\";\nimport \"./styles.css\";\n\n/* The Header Component */\nclass Header extends React.Component {\n    logoutUser = () => {\n        this.props.history.push(\"/\");\n        logout();\n    };\n\n    render() {\n        const { title, subtitle } = this.props;\n\n        return (\n            <div className=\"header\">\n                <h1>{title}</h1>\n                <h3>{subtitle}</h3>\n                <Button\n                    onClick={this.logoutUser}\n                    className=\"app__horizontal-center\"\n                    variant=\"contained\"\n                >\n                    Logout\n                </Button>\n            </div>\n        );\n    }\n}\n\nexport default Header;\n","import { isPlainObject } from \"lodash-es\";\nimport React from \"react\";\nimport { getState, subscribe, unsubscribe } from \"statezero\";\n\nclass BaseReactComponent extends React.Component {\n    componentWillMount() {\n        const callback = state => {\n            this.setState(state);\n        };\n        this._subscription = subscribe(callback, this.filterState.bind(this));\n        const filteredState = this.filterState(getState());\n        if (!isPlainObject(filteredState)) {\n            throw new Error(\"The result of filterState() must be an object\");\n        }\n        this.setState(filteredState);\n    }\n\n    componentWillUnmount() {\n        unsubscribe(this._subscription);\n    }\n\n    filterState() {\n        // Sub-classes must override this method.\n        throw new Error(\"filterState() is not implemented\");\n    }\n}\n\nexport default BaseReactComponent;\n","import React from \"react\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableRow from \"@material-ui/core/TableRow\";\n\nimport \"./styles.css\";\n\nclass Student extends React.Component {\n  render() {\n    const { student } = this.props;\n    const { name, year } = student;\n\n    return (\n      <TableRow className=\"student\">\n        <TableCell component=\"th\" scope=\"row\">\n          {name}\n        </TableCell>\n\n        <TableCell component=\"th\" scope=\"row\">\n          {year}\n        </TableCell>\n      </TableRow>\n    );\n  }\n}\n\nexport default Student;\n","// getState is used to get the value of a state path\n// setState is used to set the value of a state path\nimport { getState, setState } from \"statezero\";\n\n// A function to send a GET request to the web server,\n//  and then loop through them and add a list element for each student.\nexport const getStudents = () => {\n    // the URL for the request\n    const url = \"/students\";\n\n    // Since this is a GET request, simply call fetch on the URL\n    fetch(url)\n        .then(res => {\n            if (res.status === 200) {\n                // return a promise that resolves with the JSON body\n                return res.json();\n            } else {\n                alert(\"Could not get students\");\n            }\n        })\n        .then(json => {\n            // the resolved promise with the JSON body\n            setState(\"studentList\", json.students);\n        })\n        .catch(error => {\n            console.log(error);\n        });\n};\n\nexport const updateStudentForm = field => {\n    const { name, value } = field;\n    setState(`studentForm.${name}`, value);\n};\n\n// A function to send a POST request with a new student.\nexport const addStudent = () => {\n    // the URL for the request\n    const url = \"/students\";\n\n    // The data we are going to send in our request\n    const student = getState(\"studentForm\");\n\n    // Create our request constructor with all the parameters we need\n    const request = new Request(url, {\n        method: \"post\",\n        body: JSON.stringify(student),\n        headers: {\n            Accept: \"application/json, text/plain, */*\",\n            \"Content-Type\": \"application/json\"\n        }\n    });\n\n    // Send the request with fetch()\n    fetch(request)\n        .then(function(res) {\n            // Handle response we get from the API.\n            // Usually check the error codes to see what happened.\n            if (res.status === 200) {\n                // If student was added successfully, tell the user.\n                setState(\"message\", {\n                    body: \"Success: Added a student.\",\n                    type: \"success\"\n                });\n            } else {\n                // If server couldn't add the student, tell the user.\n                // Here we are adding a generic message, but you could be more specific in your app.\n                setState(\"message\", {\n                    body: \"Error: Could not add student.\",\n                    type: \"error\"\n                });\n            }\n        })\n        .catch(error => {\n            console.log(error);\n        });\n};\n","import React from \"react\";\nimport { uid } from \"react-uid\";\nimport Button from \"@material-ui/core/Button\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\n\nimport BaseReactComponent from \"./../BaseReactComponent\";\nimport Student from \"./../Student\";\n\n// Importing actions/required methods\nimport { getStudents } from \"../../actions/student\";\n\nimport \"./../../App.css\";\nimport \"./styles.css\";\n\n/* Component for the List of Students */\nclass StudentList extends BaseReactComponent {\n    // Access the global state paths required by your component\n    // using filterState. filterState puts these state paths on\n    // this.state\n    filterState({ studentList }) {\n        return { studentList };\n    }\n\n    render() {\n        // the filtered states are now on this.state\n        const { studentList } = this.state;\n\n        return (\n            <React.Fragment>\n                <Button\n                    onClick={getStudents}\n                    className=\"student-list__button app__horizontal-center\"\n                    variant=\"contained\"\n                >\n                    Get Students\n                </Button>\n                <Table className=\"student-list\">\n                    <TableBody>\n                        {studentList.map(student => (\n                            <Student\n                                key={uid(\n                                    student\n                                )} /* unique id required to help React render more efficiently when we delete students. */\n                                student={student}\n                            />\n                        ))}\n                    </TableBody>\n                </Table>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default StudentList;\n","import React from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Grid from \"@material-ui/core/Grid\";\n\nimport \"./../../App.css\";\nimport \"./styles.css\";\n\n/* Component for the Input field, a wrapper around MUI TextField */\nclass Input extends React.Component {\n  render() {\n    const { label, value, onChange, name } = this.props;\n\n    return (\n      <Grid item xl={3} lg={3} md={4} s={12} xs={12}>\n        <TextField\n          name={name}\n          label={label}\n          defaultValue={value}\n          className=\"input app__input\"\n          margin=\"normal\"\n          onChange={onChange}\n        />\n      </Grid>\n    );\n  }\n}\n\nexport default Input;\n","import React, { Component } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\n\nimport BaseReactComponent from \"./../BaseReactComponent\";\nimport Input from \"./../Input\";\n\n// Importing actions/required methods\nimport { updateStudentForm, addStudent } from \"../../actions/student\";\n\nimport \"./styles.css\";\n\n/* Component for the Student Form */\nclass StudentForm extends BaseReactComponent {\n    // Access the global state paths required by your component\n    // using filterState. filterState puts these state paths on\n    // this.state\n    filterState({ studentForm, message }) {\n        return { studentForm, message };\n    }\n\n    render() {\n        // the filtered states are now on this.state\n        const { studentForm, message } = this.state;\n\n        const { name, year } = studentForm;\n\n        return (\n            <React.Fragment>\n                <Grid className=\"student-form\" container spacing={4}>\n                    {/* Inputs to add student */}\n                    <Input\n                        name=\"name\"\n                        value={name}\n                        onChange={e => updateStudentForm(e.target)}\n                        label=\"Student Name\"\n                    />\n\n                    <Input\n                        name=\"year\"\n                        value={year}\n                        onChange={e => updateStudentForm(e.target)}\n                        label=\"Year\"\n                    />\n\n                    <Grid\n                        className=\"student-form__button-grid\"\n                        item\n                        xl={2}\n                        lg={2}\n                        md={12}\n                        s={12}\n                        xs={12}\n                    >\n                        <Button\n                            variant=\"contained\"\n                            color=\"primary\"\n                            onClick={addStudent}\n                            className=\"student-form__submit-button\"\n                        >\n                            Add Student\n                        </Button>\n                    </Grid>\n                </Grid>\n\n                <p className={`student-form__message--${message.type}`}>\n                    {message.body}\n                </p>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default StudentForm;\n","/*  Full Dashboard component */\nimport React from \"react\";\n\n// Importing components\nimport Header from \"./../Header\";\nimport StudentList from \"./../StudentList\";\nimport StudentForm from \"./../StudentForm\";\n\nclass Dashboard extends React.Component {\n    constructor(props) {\n        super(props);\n        this.props.history.push(\"/dashboard\");\n    }\n\n    render() {\n        const { history } = this.props;\n\n        return (\n            <div className=\"App\">\n                {/* Header component with text props. */}\n                <Header\n                    title=\"Dashboard\"\n                    subtitle=\"You are logged in.\"\n                    history={history}\n                />\n\n                {/* The Student Form */}\n                <StudentForm />\n\n                {/* The Student List */}\n                <StudentList />\n            </div>\n        );\n    }\n}\n\nexport default Dashboard;\n","/* The Authenticated View (after logging in) */\n\nimport React from \"react\";\n// Importing react-router-dom to use the React Router\nimport { Route, Switch, BrowserRouter } from \"react-router-dom\";\n\nimport Dashboard from \"./react-components/Dashboard\";\n\nclass MainView extends React.Component {\n    render() {\n        return (\n            <BrowserRouter>\n                <Switch>\n                    <Route\n                        exact\n                        path={[\"/\", \"/dashboard\"]}\n                        render={({ history }) => (\n                            <Dashboard history={history} />\n                        )}\n                    />\n                    <Route render={() => <div>404 Not found</div>} />\n                </Switch>\n            </BrowserRouter>\n        );\n    }\n}\n\nexport default MainView;\n","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\n\n// Importing actions/required methods\nimport { updateLoginForm, login } from \"../../actions/user\";\n\nimport \"./../../App.css\";\nimport \"./styles.css\";\n\nclass Login extends React.Component {\n    render() {\n        return (\n            <div className=\"login__bg-image center\">\n                <div className=\"login__card center\">\n                    <h2>Student API</h2>\n\n                    <TextField\n                        name=\"email\"\n                        label=\"Email\"\n                        className=\"login__input app__input app__horizontal-center\"\n                        margin=\"normal\"\n                        onChange={e => updateLoginForm(e.target)}\n                    />\n\n                    <TextField\n                        name=\"password\"\n                        label=\"Password\"\n                        type=\"password\"\n                        className=\"login__input app__input app__horizontal-center\"\n                        margin=\"normal\"\n                        onChange={e => updateLoginForm(e.target)}\n                    />\n\n                    <Button\n                        className=\"login__button app__horizontal-center\"\n                        onClick={login}\n                    >\n                        Log In\n                    </Button>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Login;\n","import React from \"react\";\n\nimport MainView from \"./MainView\";\nimport BaseReactComponent from \"./react-components/BaseReactComponent\";\nimport Login from \"./react-components/Login\";\n\nimport { readCookie } from \"./actions/user\";\n\nimport \"./App.css\";\n\nclass App extends BaseReactComponent {\n    // Access the global state paths required by your component\n    // using filterState. filterState puts these state paths on\n    // this.state.\n    // Note: all available global state paths are initialized in\n    // setEmptyState() in actions/helpers.js\n    filterState({ currentUser }) {\n        return { currentUser };\n    }\n\n    constructor(props) {\n        super(props);\n        readCookie();\n    }\n\n    render() {\n        const { currentUser } = this.state;\n\n        return (\n            <div className=\"app\">{!currentUser ? <Login /> : <MainView />}</div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { startLogging } from \"statezero\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { setEmptyState } from \"./actions/helpers\";\n\nimport \"./index.css\";\n\n// Initially set all state paths needed in your app as empty.\nsetEmptyState();\n\n// startLogging from statezero logs updated state paths to the console\n// as your app sets/unsets state path values (very useful for debugging)\nstartLogging();\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}